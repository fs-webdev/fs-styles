/**
 * Forms
 * @section
 */

/*------------------------------------*\
  $FORMS
\*------------------------------------*/
/**
 * Text Field
 *
 * ##### Acceptable Use
 *
 * All form fields __must__ have an associated `<label>` for accessibility. If you must hide
 * the text of the label, use the class `visually-hidden`. Never use `display:none` as that
 * will hide it from screen readers as well.
 *
 * ##### Accessibility
 *
 * When marking a form field as required, [you do not need the aria-required attribute](https://stackoverflow.com/questions/37974796/when-to-use-the-required-attribute-vs-the-aria-required-attribute-for-input-elem/37975985#37975985). Instead, just use the `required` attribute.
 *
 * Wrap the input elements in a `<form>` element so that the enter key will submit
 * the form. You can then add an event listener to the `onsubmit` event to determine
 * what should happen.
 *
 * Wrap the inputs in a `<fieldset>` element with a short and descriptive `<legend>` to
 * group thematically related controls in a form such as address, date of birth,
 * and sets of radio buttons or check boxes. Screen readers will prefix the text to each
 * control label contained within the fieldset.
 *
 * @section
 * @sectionof Forms
 *
 * @example
 * <fieldset>
 *   <p>
 *     <label for="text">Text Input</label>
 *     <input id="text" type="text" placeholder="Text Input"/>
 *   </p>
 *   <p>
 *     <label for="textarea">Textarea</label>
 *     <textarea id="textarea" rows="8" cols="48" placeholder="Enter your message here"></textarea>
 *   </p>
 *   <p>
 *     <label for="disabled_text">Disabled Input</label>
 *     <input id="disabled_text" type="text" placeholder="Disabled" disabled/>
 *   </p>
 * </fieldset>
 */

/*
 * 1. The input wrapped by a label pattern has been deprecated in favor of the new
 *    input followed by a label for accessibility. However, keep the old styles
 *    so that apps can convert piecemeal instead of all at once. Deprecate in v4.
 */
label {
  color: $color-grey-light;
  display: block;
  font-size: $font-size-small;
  font-weight: normal;
  line-height: $line-height-small;
  margin-bottom: 5px;
  cursor: pointer;

  & ~ input[type="radio"] ,
  & ~ input[type="checkbox"] {
    font-size: $font-size-medium;
  }

  /* [1] */
  > input[type="radio"],
  > input[type="checkbox"] {
    font-size: $font-size-medium;
    padding: 0;
    margin: 0;
    position: relative;
    top: 5px;
    margin-right: 10px;
    margin-bottom: 15px;
  }
}

::-webkit-input-placeholder {
  font-family: inherit;
}
::-moz-placeholder {
  font-family: inherit;
}
:-ms-input-placeholder {
  font-family: inherit;
}

input {
  font-family: inherit;
}

/*
 * 1. Buttons and inputs should have the same padding so that they can line up
 *    next to one another.
 * 2. Inputs do not strictly adhere to line-height and font-size to determine
 *    the height of the element and adds about 1.23px top/bottom to the height.
 *    We can compensate for this by setting the line-height to normal for both
 *    the button and the input.
 * 3. Safari does something with the the font color of disabled input fields that
 *    makes the color you input much lighter than it should be. To fix, we need
 *    to add a -webkit only properties. We'll use a darker color to help match
 *    contrast in other browsers.
 *    @see https://stackoverflow.com/a/21522506/2124254
 */
textarea,
input[type=text],
input[type="password"],
input[type="datetime"],
input[type="datetime-local"],
input[type="date"],
input[type="month"],
input[type="time"],
input[type="week"],
input[type="number"],
input[type="email"],
input[type="url"],
input[type="search"],
input[type="tel"],
input[type="color"] {
  background-color: #fff;
  border: 1px solid $color-grey-border;
  border-radius: $border-radius;
  box-shadow: inset 0 3px 0 rgba(0,0,0,0.05);
  box-sizing: border-box;
  color: $color-grey-body;
  font-family: inherit;
  font-size: $font-size-medium;
  height: inherit;  // needed to override Bootstrap fixed height
  line-height: normal; /* [2] */
  margin-bottom: 0;
  padding: pxToRem(6px 10px); /* [1] */
  transition: border linear 0.2s;
  width: 100%;

  &:focus {
    border: 1px solid $color-grey-body;
    box-shadow: inset 0 3px 0 rgba(0,0,0,0.05);
    outline: 0;
  }

  &:disabled,
  &.disabled {
    -webkit-text-fill-color: $color-grey-light; /* [3] */
    -webkit-opacity: 1; /* [3] */
    color: #999999;
    background: #f0f0f0;
  }
}

textarea {
  resize: vertical;
  min-height: 75px;
}





/**
 * Select Menu
 *
 * ##### Acceptable Use
 *
 * Use a select menu when the user needs to select from a list of six or more options.
 *
 * ##### Avoid
 *
 * Avoid using select menus when there are five or less options.</p><p>Avoid multi select
 * menus since not all browsers have keyboard support for them and not all users
 * understand how to use them.
 *
 * ##### Accessibility
 *
 * When appropriate, use the `<optgroup>` element to group related options together for
 * better readability. See [Accessible Select Menu](http://webaim.org/techniques/forms/controls#select) for an example.
 *
 * @section
 * @sectionof Forms
 *
 * @example
 * <label for="select">Select</label>
 * <select id="select">
 *   <option>Option One</option>
 *   <option>Option Two</option>
 *   <option>Option Three</option>
 *   <option>Option Four</option>
 *   <option>Option Five</option>
 *   <option>Option Six</option>
 * </select>
 */
select {
  background-color: #fff;
  border: 1px solid $color-grey-border;
  color: $color-grey-body;
  font-family: inherit;
  font-size: $font-size-medium;
  height: pxToRem(30px);
  line-height: $line-height-medium;
  margin: 0;
  padding: pxToRem(4px 6px);
  width: 100%;

  &:focus {
    border: 1px solid $color-grey-body;
    outline: none;
  }
}





/**
 * Checkbox
 *
 * ##### Acceptable Use
 *
 * Each checkbox __must__ have an associated `<label>` for accessibility. If you must hide
 * the text of the label, add the text as an `aria-label` attribute. Never use
 * `display:none` as that will hide it from screen readers as well.
 *
 * ##### Accessibility
 *
 * Wrap the checkboxes in a `<fieldset>` element with a short and descriptive
 * `<legend>`. Screen readers will prefix the text to each control label contained
 * within the fieldset.
 *
 * @section
 * @sectionof Forms
 *
 * @example
 * <form action="#">
 *   <fieldset>
 *     <legend>List of checkboxes</legend>
 *     <ul>
 *       <li>
 *         <input name="checkbox" type="checkbox" id="choiceA" checked/>
 *         <label for="choiceA">Choice A</label>
 *       </li>
 *       <li>
 *         <input name="checkbox" type="checkbox" id="choiceB"/>
 *         <label for="choiceB">Choice B</label>
 *       </li>
 *       <li>
 *         <input name="checkbox" type="checkbox" id="choiceC"/>
 *         <label for="choiceC">Choice C</label>
 *       </li>
 *     </ul>
 *   </fieldset>
 *   <fieldset>
 *     <legend>Disabled checkboxes</legend>
 *     <ul>
 *       <li>
 *         <input name="checkbox-disabled" type="checkbox" id="choiceADisabled" checked disabled/>
 *         <label for="choiceADisabled">Selected</label>
 *       </li>
 *       <li>
 *         <input name="checkbox-disabled" type="checkbox" id="choiceBDisabled" disabled/>
 *         <label for="choiceBDisabled">Not selected</label>
 *       </li>
 *     </ul>
 *   </fieldset>
 * </form>
 */

/**
 * Radio Buttons
 *
 * ##### Acceptable Use
 *
 * Use radio buttons when the user needs to select from a list of less than five options.
 *
 * Each radio button __must__ have an associated `<label>` for accessibility. If you must
 * hide the text of the label, add the text as an `aria-label` attribute. Never use
 * `display:none` as that will hide it from screen readers as well.
 *
 * ##### Avoid
 *
 * Avoid using radio buttons when there are more than five options. Those options would be
 * better displayed as a [select menu](#select-menu).
 *
 * ##### Accessibility
 *
 * Wrap the radio buttons in a `<fieldset>` element with a short and descriptive
 * `<legend>`. Screen readers will prefix the text to each control label contained
 * within the fieldset.
 *
 * @section
 * @sectionof Forms
 *
 * @example
 * <form action="#">
 *   <fieldset>
 *     <legend>List of radio buttons</legend>
 *     <ul>
 *       <li>
 *         <input name="radio" type="radio" id="option1" checked/>
 *         <label for="option1">Option 1</label>
 *       </li>
 *       <li>
 *         <input name="radio" type="radio" id="option2"/>
 *         <label for="option2">Option 2</label>
 *       </li>
 *       <li>
 *         <input name="radio" type="radio" id="option3"/>
 *         <label for="option3">Option 3</label>
 *       </li>
 *     </ul>
 *   </fieldset>
 *   <fieldset>
 *     <legend>Disabled radio buttons</legend>
 *     <ul>
 *       <li>
 *         <input name="radio-disabled" type="radio" id="option1-disabled" checked disabled/>
 *         <label for="option1-disabled">Selected</label>
 *       </li>
 *       <li>
 *         <input name="radio-disabled" type="radio" id="option2-disabled" disabled/>
 *         <label for="option2-disabled">Not selected</label>
 *       </li>
 *     </ul>
 *   </fieldset>
 * </form>
 */

/*
 * Increase the size of radio buttons and check boxes because the default browser
 * sizes are too small, especially for those with motor disabilities or the elder.
 * @see https://getsatisfaction.com/familysearch/topics/larger-radio-buttons-please
 * @see https://getsatisfaction.com/familysearch/topics/microscopic-sized-check-boxes
 *
 * 1. Since using `scale()` makes the input fields look pixelated, we'll have to create
 *    custom checkboxes and radio buttons, ensuring that they are still accessible. To do
 *    that we'll hide the default checkbox or radio button and use the label element
 *    to make it look like a checkbox or radio button.
 *    @see http://adrianroselli.com/2017/05/under-engineered-custom-radio-buttons-and-checkboxen.html
 * 2. Ensure empty state does not add extra padding/margin that would break field group
 *    with checkbox, or checkboxes or radio buttons by themselves.
 *    For labels that need to show text only for screen readers, use aria-label on the
 *    label element.
 *    @see https://stackoverflow.com/questions/43857247/making-a-search-form-accessible-label-vs-aria-label-vs-aria-labelledby/43860344#43860344
 *    @example <label aria-label="Label for screen readers only"></label>
 * 3. Use the [id] selector to only hide inputs with labels so apps don't have all
 *    their checkboxes and radio buttons hidden by default. Should increase adaption
 *    time. Remove once everyone has fixed all their inputs.
 * 4. Polymer strips out single quotes from data:image urls from external stylesheets
 *    brought in using style modules. as a temporary workaround we'll have to encode
 *    all quotes (ugh...)
 *    @see https://github.com/Polymer/polymer/issues/1276
 */
input[type="checkbox"][id],
input[type="radio"][id] {
  @extends $visually-hidden;  /* [1] */

  + label {
    font-size: $font-size-medium;
    margin: 0; /* [2] */
  }

  + label:before {
    background-color: #fff;
    background-position: center;
    background-repeat: no-repeat;
    border: 1px solid $color-grey-border;
    content: '';
    display: inline-block;
    height: pxToRem(20px);
    position: relative;
    transition: background-size 0.15s ease-out, background-color 0.15s ease-out;
    vertical-align: middle;
    width: pxToRem(20px);
  }

  &[disabled] + label {
    color: rgba(51,51,49,0.4);
    cursor: not-allowed;
  }

  /* [2] */
  + label:not(:empty) {
    margin-bottom: 5px;

    &:before {
      margin-right: 10px;
    }
  }

  &:focus + label:before {
    outline: auto 2px Highlight;
    outline: auto 5px -webkit-focus-ring-color;
  }

  &:checked + label:before {
    border: 1px solid #246bdb;
    background-color: #3073dd;
  }

  &:disabled + label:before {
    border: 1px solid $color-grey-border;
    background-color: #f0f0f0;
  }
}

// checkbox
input[type="checkbox"] {

  + label:before {
    border-radius: $border-radius;
    background-size: 5%;  // safari seems to break if you start an animation with 0% size
  }

  /* [2] */
  + label:not(:empty):before {
    top: -1px;
  }

  &:checked + label:before {
    background-image: url("data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 baseProfile=%22tiny%22 x=%220%22 y=%220%22 width=%2220%22 height=%2220%22%3E%3Cpath fill=%22%23fff%22 d=%22M7 16.6c-0.2 0-0.3-0.1-0.5-0.2l-5.9-5.9c-0.1-0.1-0.2-0.3-0.2-0.5 0-0.2 0.1-0.3 0.2-0.5l2-1.9c0.1-0.1 0.3-0.2 0.5-0.2 0.2 0 0.3 0.1 0.5 0.2l2.9 2.9c0.2 0.2 0.4 0.2 0.6 0.2 0.2 0 0.4-0.1 0.6-0.2l7.9-7.9c0.1-0.1 0.3-0.2 0.5-0.2s0.3 0.1 0.5 0.2l1.9 1.9C18.5 4.7 18.6 4.8 18.6 5s-0.1 0.3-0.2 0.5L7.5 16.4C7.3 16.5 7.2 16.6 7 16.6z%22/%3E%3C/svg%3E") !important; /* [4] */
    background-size: 70%;
  }

  &:checked:disabled + label:before {
    background-image: url("data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 baseProfile=%22tiny%22 x=%220%22 y=%220%22 width=%2220%22 height=%2220%22%3E%3Cpath fill=%22%23bdbdbd%22 d=%22M7 16.6c-0.2 0-0.3-0.1-0.5-0.2l-5.9-5.9c-0.1-0.1-0.2-0.3-0.2-0.5 0-0.2 0.1-0.3 0.2-0.5l2-1.9c0.1-0.1 0.3-0.2 0.5-0.2 0.2 0 0.3 0.1 0.5 0.2l2.9 2.9c0.2 0.2 0.4 0.2 0.6 0.2 0.2 0 0.4-0.1 0.6-0.2l7.9-7.9c0.1-0.1 0.3-0.2 0.5-0.2s0.3 0.1 0.5 0.2l1.9 1.9C18.5 4.7 18.6 4.8 18.6 5s-0.1 0.3-0.2 0.5L7.5 16.4C7.3 16.5 7.2 16.6 7 16.6z%22/%3E%3C/svg%3E") !important; /* [4] */
  }
}

// radio
input[type="radio"] {

  + label:before {
    background-size: 100%;
    border-radius: 50%;
  }

  /* [2] */
  + label:not(:empty):before {
    top: -2px;
  }

  &:checked + label:before {
    background-image: url("data:image/svg+xml,%3Csvg viewBox=%220 0 20 20%22 xmlns=%22http://www.w3.org/2000/svg%22 fill=%22%23fff%22%3E%3Ccircle cx=%2210%22 cy=%2210%22 r=%2210%22%3E%3C/circle%3E%3C/svg%3E") !important; /* [4] */
    background-size: 30%;
  }

  &:checked:disabled + label:before {
    background-image: url("data:image/svg+xml,%3Csvg viewBox=%220 0 20 20%22 xmlns=%22http://www.w3.org/2000/svg%22 fill=%22%23bdbdbd%22%3E%3Ccircle cx=%2210%22 cy=%2210%22 r=%2210%22%3E%3C/circle%3E%3C/svg%3E") !important; /* [4] */
  }
}

fieldset {
  padding: 0;
  margin: 0;
  border: 0;
}

legend {
  border: 0;
  color: $color-grey-body;
  font-size: $font-size-medium;
  line-height: $line-height-medium;
  margin: 0 0 5px 0;
}